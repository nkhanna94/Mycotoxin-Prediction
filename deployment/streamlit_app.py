import pickle
import numpy as np
import streamlit as st

# Page Configuration
st.set_page_config(
    page_title="Vomitoxin (DON) Prediction", 
    page_icon="üåΩ", 
    layout="centered"
)

# Load the trained model
with open("deployment/model.pkl", "rb") as f:
    model = pickle.load(f)

# Load scalers
with open("deployment/x_scaler.pkl", "rb") as f:
    x_scaler = pickle.load(f)

with open("deployment/y_scaler.pkl", "rb") as f:
    y_scaler = pickle.load(f)

# Sidebar
st.sidebar.header("About the Model")
st.sidebar.write("""
üîç **Purpose:**  
This app predicts **Deoxynivalenol (DON) levels** in corn using **hyperspectral imaging (HSI) data**.

üìè **Measurement Unit:**  
Results are given in **parts per billion (ppb)**.
""")

st.sidebar.markdown("---")
st.sidebar.write("üë©üèª‚Äçüíª *Built as part of an Internship Assignment*")

# Main UI
st.title("üåΩ Vomitoxin (DON) Prediction")
st.markdown("Predict **Deoxynivalenol (DON) concentration** in **ppb** using advanced **Machine Learning**.")

st.write("### üî¢ Enter Feature Values")

default_values = "0.3691811091868325,0.39829397243968717,0.3821558007709882,0.35595960552566835,0.35711759050577296,0.3471244990476445,0.34777293761156197,0.3233045166986985,0.346832492228088,0.3464909293394987,0.3375916676495423,0.3034209328885047,0.3047002116642815,0.3094723273060182,0.2951110836392418,0.2999871449193035,0.3128484270747014,0.30647451256786823,0.3063603835360076,0.3150556588914579,0.3088093307820985,0.29824738777525983,0.31975913781965026,0.29602233136273365,0.2834384266201794,0.29481454402738694,0.29051929589830444,0.3061788291447831,0.2947270730636895,0.292875073116667,0.2743299422553231,0.2678652839483472,0.28151156046790266,0.26095751364717573,0.27446580393365366,0.28648190827911163,0.2771148564209966,0.2631022892574994,0.2730765765962827,0.2701127083632211,0.2948066325516404,0.27396424394202584,0.27882604826792,0.28209128206218015,0.28430212226208923,0.27772067610831674,0.2640841760236759,0.25932378676569084,0.2769007975582599,0.2676649310054207,0.28008537111244847,0.2758348037002381,0.27832434401183026,0.2911158189112154,0.282262409513245,0.29244967799684474,0.30167765229314875,0.2822624689705471,0.2945560875324352,0.30288376676508594,0.2892123644754098,0.2879066527021441,0.28847836149084205,0.29751898028747964,0.2732029850142385,0.28935896965174174,0.2994377258456714,0.2943993536532376,0.28513281926825906,0.3039720433601942,0.3145511855344502,0.3052421710586762,0.30457640725037094,0.2933305525348368,0.2853508876625066,0.3147085741573292,0.31691394965151826,0.30959859013702845,0.3187619404625467,0.322541189632715,0.32658267501725635,0.33823393746013397,0.3425237812291537,0.35346162728110836,0.3577898465554479,0.3701718052709356,0.3542432803389899,0.39185945492874624,0.3876053976485339,0.4005691209882703,0.4060807465322471,0.39663955920616556,0.41359170143478957,0.43812815183074594,0.44274038688840794,0.44359534240455006,0.44532764180354223,0.45305617306440066,0.4609296735491834,0.46083785863014204,0.48734494645425314,0.48184469308870964,0.47893035289385016,0.4750745209405677,0.5176395089590291,0.5000626024856157,0.4902193402799981,0.5134066600704829,0.5085767510189604,0.5127325701570042,0.5187222705676909,0.5180303786582654,0.5375435819955595,0.5408930425980957,0.5189809578129185,0.548809479287694,0.5619615364027843,0.5488824918820944,0.5600094996850132,0.5673053482936903,0.5619195671486649,0.561182457717214,0.5607825402001714,0.5746864901721274,0.5707321026090894,0.5704630950494879,0.5708526052228685,0.5660887474425728,0.5729827089984247,0.6112357985849722,0.5659156732791143,0.5987149736146099,0.604646162996095,0.5893042608886893,0.5936100089911417,0.5897976211803291,0.6013478603427054,0.6020029469011149,0.5980230968110201,0.6066318086617584,0.6069790466416147,0.5989867357404078,0.6229127427870047,0.6047799080047318,0.5957402078397974,0.5971965228006747,0.6128772320914879,0.6303520778823858,0.6151712274241632,0.6333692652756647,0.6263196823097432,0.6117417249490771,0.6199926761437753,0.6058059553394908,0.6121954448724394,0.6334404260991602,0.6031932576758254,0.6234551870294881,0.623744315165497,0.6384294425853008,0.6153678366371147,0.6361222736561206,0.6459270519584895,0.62147964396045,0.6400782809910618,0.6466933882723405,0.6472054436709026,0.6433107066183803,0.6543333442817963,0.6215443289650082,0.6343005027241224,0.6326695610499544,0.6566684913824125,0.6508808777417103,0.6522514830900794,0.6584133709833835,0.6472464427254733,0.64139166724805,0.6570325591737534,0.6371250903593273,0.6542520576549812,0.6536006799749364,0.6406173546817332,0.6612817882483203,0.6536097361705446,0.6432412303655797,0.6552833212336151,0.6654422676101941,0.6681679860931848,0.6666759299443834,0.6618693670434607,0.6664272763898096,0.6711787405890639,0.6514909681821994,0.6717490955414066,0.6689269002915251,0.6748429294208815,0.6736690823047857,0.6761204069591864,0.6873243850966675,0.6882958778585695,0.658829481888431,0.6877404347744691,0.6846020980460296,0.6777596172890117,0.6843051880807848,0.682748154431848,0.6788253635029874,0.696000036072688,0.6889258059929781,0.6980601932622125,0.6939600488832615,0.6910446270655903,0.6812922201164555,0.6972712501295691,0.6936819294238454,0.6868189557211811,0.6884897058442438,0.7034842516845895,0.7064783976500193,0.6919146440669844,0.689885940478906,0.6888240612972769,0.6979189235220152,0.7018552841650824,0.6951932394676784,0.7097770757019832,0.7215058439095269,0.7058296182680484,0.7103641710692121,0.6979549580434774,0.7117558736580565,0.701490235509197,0.7066414732375954,0.704415145708195,0.7065417913543781,0.7086740058458535,0.7171143434517026,0.6969086636275206,0.6985268519497654,0.7125849577570741,0.7337370681700419,0.7166310942994378,0.719585972516156,0.700617189060682,0.7215722351418673,0.7134003233587557,0.7094916709903231,0.7194358450699144,0.7107750063413673,0.7171373548458331,0.7127202803625595,0.7098027811540594,0.7186489548180609,0.7171934903522761,0.7086177237366121,0.7178373135118379,0.7042003850639251,0.7201373006496375,0.71988054304295,0.706449788696204,0.7079351660605255,0.7393666749811613,0.7077659651215342,0.7264974415435643,0.7233701113073692,0.6889963348217126,0.713315769654552,0.726769836846118,0.7158240972191662,0.7172780040058062,0.7114750712110877,0.73419539542318,0.7217124664212952,0.7317574417674294,0.7219377126497766,0.7235673193505742,0.7345957543543972,0.7292131363520727,0.7300072411423681,0.7345817641526348,0.7374892434996548,0.7609420685062392,0.7317449052756597,0.7335737664202429,0.7308709446474264,0.7233438707993831,0.721342993768281,0.7318415152246402,0.7241274114985427,0.7330651894665787,0.7305871512959977,0.7412787274579474,0.7330701117389162,0.7464619249719796,0.7242675757375161,0.7279599618106886,0.7304118130548791,0.7228233672550911,0.735830199017248,0.728708289927864,0.7535708324922722,0.723472910830956,0.7402910886756229,0.7331571278216401,0.7364144519060339,0.7341998039952436,0.7361342933411886,0.7537580731403261,0.7303961009160577,0.7237593276327575,0.7351593703657803,0.7412482910662433,0.740750928783283,0.7200379588860321,0.721392267593961,0.7476443802225073,0.7557340667635595,0.7476973627084417,0.743088562792601,0.7460252218480312,0.7435849007186117,0.7379033644257008,0.7463733059225237,0.7423464658271445,0.7353448127281156,0.7451709308118699,0.7289077097162496,0.7546503949547523,0.7392248530004958,0.7417417922024871,0.7306263732247356,0.7520077711518949,0.7363077722415611,0.7332093089154269,0.7341055936323427,0.7421446876633712,0.7432337105691157,0.7430463349646798,0.752265431315601,0.7392389154434407,0.7237932926046274,0.7316707570283819,0.754176270061971,0.7471434896105006,0.7376519509950655,0.7345380260396281,0.7259475680651035,0.7486472217417908,0.7377784692670722,0.7468802835152583,0.7324911700355764,0.7549825286909078,0.727646711997796,0.7342684949069217,0.7524930616582877,0.7392783732477258,0.7309372145859706,0.7547705794067847,0.740970409435659,0.7473606741937636,0.7562154793158431,0.7330534948216139,0.7316337455992246,0.7409547084540395,0.748514612407421,0.7445479340083259,0.7440474706670036,0.7294472978960553,0.7348847192754935,0.7305055453780132,0.7414099883219436,0.7365899491381894,0.7217404195607333,0.7346820292164824,0.7246844687539269,0.737023957577229,0.7270970189286099,0.7276474251523792,0.7380491067546946,0.7383528544234527,0.7253003993740281,0.7421778405106431,0.7236880107572125,0.7333890629618454,0.7221136306493627,0.7026303637710607,0.7141561781539241,0.7133726813902471,0.7308252088720913,0.7106348185545308,0.7087842746621915,0.7141406734810714,0.7196163248051783,0.6984960690521806,0.7136364754235368,0.713462837018356,0.7210687865290575,0.7181247864555594,0.7060649953308993,0.7253922668275321,0.7082198134452512,0.7163073212540354,0.7166922227664071,0.7108895186064746,0.7152064317499903,0.7048553445562828,0.718775679450447,0.7253019433603823,0.724509140943453,0.7000414219673206,0.706823232508926,0.7036632162757288,0.6937227464672096,0.6971065349997057,0.6961273303051883,0.7116269460243595,0.6983202541809318,0.7021735413805408,0.7000694577997151,0.6989347019608231,0.6828155604555688,0.6901017711175444,0.6936331433089286,0.6941931409673452,0.7031695025234301,0.6721856580746938,0.6744313935398897,0.6761298652403046,0.6656831304937264,0.677416458469882,0.6652177769728501,0.6741566968642687,0.6725897880592118,0.668232298707208,0.6535951628699598,0.6824443558873413,0.6647795970763474,0.6486737129857278,0.6734377423117759,0.65858107800671,0.6769055067807151,0.6712796068998069,0.66122285869672,0.6592269287872289,0.6629840912241719,0.6745903013692642,0.6674813703260519"

user_input = st.text_area(
    "Input comma-separated values:",
    value=default_values,
    placeholder="Example: 0.12, 1.45, -0.98, 2.76, ...", 
    height=100
)

if st.button("üîç Predict"):
    try:
        # Convert input text to a NumPy array
        user_features = np.array([float(x) for x in user_input.split(",")]).reshape(1, -1)

        # Validate input size
        if user_features.shape[1] != x_scaler.n_features_in_:
            st.error(f"‚ö† Expected {x_scaler.n_features_in_} features, but got {user_features.shape[1]}.")
        else:
            # Scale input
            user_input_scaled = x_scaler.transform(user_features)

            # Predict & Unscale
            prediction_scaled = model.predict(user_input_scaled)
            prediction = y_scaler.inverse_transform(prediction_scaled.reshape(-1, 1))

            # Display Result
            st.subheader("üìä Prediction Result")
            st.success(f"Predicted DON Level: **{prediction[0, 0]:.4f} ppb**")

    except ValueError:
        st.error("üö® Invalid input! Please enter numerical values separated by commas.")

# Footer
st.markdown("---")
st.markdown("üëßüèªüíª *Developed as part of a machine learning pipeline for predicting mycotoxin levels in corn.*")
